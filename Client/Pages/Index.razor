@page "/"


@implements IAsyncDisposable
@implements IStation


@inject NavigationManager NavigationManager


<div class="row" style="min-height: 84vh; max-height: 84vh">
    <div class="col-sm-2">
        <div class="card h-100">
            <div class="card-header">Stations</div>
            <div class="card-body" style="overflow-y: auto">
                <ul class="list-group list-group-flush">
                    @foreach (var callSign in connectedStationsCallSigns)
                    {
                        <li class="list-group-item">@callSign</li>
                    }
                </ul>
            </div>
        </div>
    </div>

    <div class="col-sm-10">
        <div class="card" style="min-height: 60vh; max-height: 60vh">
            <div class="card-header">Medium</div>
            <div class="card-body" style="overflow-y: auto">
                @foreach (var transmission in transmissions)
                {
                <div class="alert alert-primary small">
                    <div class="d-flex justify-content-between">
                        <span>@transmission.CallingStationCallSign</span>
                        <span>@transmission.CreationDate.ToLocalTime()</span>
                    </div>
                    <div>@transmission.Telegram</div>
                    <div>@morseCodeOperator.DecodeTelegram(transmission.Telegram)</div>
                </div>
                }
            </div>
        </div>

        <hr />

        <EditForm Model="@message" OnValidSubmit="@PropagateSignals">
            <div class="card" style="min-height: 20vh; max-height: 20vh">
                <div class="card-body" style="overflow-y: auto">
                    <div class="input-group input-group-sm">
                        <InputText class="form-control form-control-sm mr-1"
                                   type="text"
                                   size="50"
                                   placeholder="Station's call sign"
                                   @bind-Value="stationRequiredCallSign" />
                        <button class="btn btn-sm btn-success mr-1"
                                type="button"
                                disabled="@(hubConnection.State != HubConnectionState.Connected)"
                                title="Call/Reply"
                                @onclick="CallReply">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-telephone" viewBox="0 0 16 16">
                                <path d="M3.654 1.328a.678.678 0 0 0-1.015-.063L1.605 2.3c-.483.484-.661 1.169-.45 1.77a17.568 17.568 0 0 0 4.168 6.608 17.569 17.569 0 0 0 6.608 4.168c.601.211 1.286.033 1.77-.45l1.034-1.034a.678.678 0 0 0-.063-1.015l-2.307-1.794a.678.678 0 0 0-.58-.122l-2.19.547a1.745 1.745 0 0 1-1.657-.459L5.482 8.062a1.745 1.745 0 0 1-.46-1.657l.548-2.19a.678.678 0 0 0-.122-.58L3.654 1.328zM1.884.511a1.745 1.745 0 0 1 2.612.163L6.29 2.98c.329.423.445.974.315 1.494l-.547 2.19a.678.678 0 0 0 .178.643l2.457 2.457a.678.678 0 0 0 .644.178l2.189-.547a1.745 1.745 0 0 1 1.494.315l2.306 1.794c.829.645.905 1.87.163 2.611l-1.034 1.034c-.74.74-1.846 1.065-2.877.702a18.634 18.634 0 0 1-7.01-4.42 18.634 18.634 0 0 1-4.42-7.009c-.362-1.03-.037-2.137.703-2.877L1.885.511z" />
                            </svg>
                        </button>

                        <button class="btn btn-sm btn-warning mr-1"
                                type="button"
                                disabled="@(hubConnection.State != HubConnectionState.Connected)"
                                title="Wait"
                                @onclick="Wait">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pause-circle" viewBox="0 0 16 16">
                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                <path d="M5 6.25a1.25 1.25 0 1 1 2.5 0v3.5a1.25 1.25 0 1 1-2.5 0v-3.5zm3.5 0a1.25 1.25 0 1 1 2.5 0v3.5a1.25 1.25 0 1 1-2.5 0v-3.5z" />
                            </svg>
                        </button>

                        <button class="btn btn-sm btn-danger"
                                type="button"
                                disabled="@(hubConnection.State != HubConnectionState.Connected)"
                                title="End Work"
                                @onclick="EndWork">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-telephone-x" viewBox="0 0 16 16">
                                <path d="M3.654 1.328a.678.678 0 0 0-1.015-.063L1.605 2.3c-.483.484-.661 1.169-.45 1.77a17.568 17.568 0 0 0 4.168 6.608 17.569 17.569 0 0 0 6.608 4.168c.601.211 1.286.033 1.77-.45l1.034-1.034a.678.678 0 0 0-.063-1.015l-2.307-1.794a.678.678 0 0 0-.58-.122l-2.19.547a1.745 1.745 0 0 1-1.657-.459L5.482 8.062a1.745 1.745 0 0 1-.46-1.657l.548-2.19a.678.678 0 0 0-.122-.58L3.654 1.328zM1.884.511a1.745 1.745 0 0 1 2.612.163L6.29 2.98c.329.423.445.974.315 1.494l-.547 2.19a.678.678 0 0 0 .178.643l2.457 2.457a.678.678 0 0 0 .644.178l2.189-.547a1.745 1.745 0 0 1 1.494.315l2.306 1.794c.829.645.905 1.87.163 2.611l-1.034 1.034c-.74.74-1.846 1.065-2.877.702a18.634 18.634 0 0 1-7.01-4.42 18.634 18.634 0 0 1-4.42-7.009c-.362-1.03-.037-2.137.703-2.877L1.885.511z" />
                                <path fill-rule="evenodd" d="M11.146 1.646a.5.5 0 0 1 .708 0L13 2.793l1.146-1.147a.5.5 0 0 1 .708.708L13.707 3.5l1.147 1.146a.5.5 0 0 1-.708.708L13 4.207l-1.146 1.147a.5.5 0 0 1-.708-.708L12.293 3.5l-1.147-1.146a.5.5 0 0 1 0-.708z" />
                            </svg>
                        </button>
                    </div>
                    <div>
                        <InputTextArea id="content-input"
                                       class="form-control form-control-sm my-1"
                                       rows="2"
                                       placeholder="Your message ..."
                                       @bind-Value=@message />
                        <div class="d-flex justify-content-end">
                            <button class="btn btn-sm btn-primary"
                                    type="submit"
                                    disabled="@(hubConnection.State != HubConnectionState.Connected)">
                                Propagate Signals
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</div>


@code {
    private HubConnection hubConnection;
    private MorseCodeOperator morseCodeOperator;
    private string stationRequiredCallSign = "";
    private string message = "";

    private string callSign { get; set; }
    private List<Transmission> transmissions { get; set; }
    private List<string> connectedStationsCallSigns { get; set; }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/transmission-medium")).Build();
        morseCodeOperator = new MorseCodeOperator();

        transmissions = new List<Transmission>();
        connectedStationsCallSigns = new List<string>();

        hubConnection.On<Transmission>("RecieveTransmission", RecieveTransmission);
        hubConnection.On<string>("SetCallSign", SetCallSign);
        hubConnection.On<List<string>>("SetStationsCallSigns", SetStationsCallSigns);
        hubConnection.On<string>("StationConnected", StationConnected);
        hubConnection.On<string>("StationDisconnected", StationDisconnected);

        await hubConnection.StartAsync();
    }

    public async Task RecieveTransmission(Transmission transmission)
    {
        transmissions.Add(transmission);
        StateHasChanged();
    }

    public async Task SetCallSign(string stationCallSign)
    {
        callSign = stationCallSign;
        StateHasChanged();
    }

    public async Task SetStationsCallSigns(List<string> stationsCallSigns)
    {
        connectedStationsCallSigns.Clear();
        connectedStationsCallSigns.AddRange(stationsCallSigns);
        StateHasChanged();
    }

    public async Task StationConnected(string stationCallSign)
    {
        connectedStationsCallSigns.Add(stationCallSign);
        StateHasChanged();
    }

    public async Task StationDisconnected(string stationCallSign)
    {
        connectedStationsCallSigns.Remove(stationCallSign);
        StateHasChanged();
    }

    public async Task CallReply()
    {
        string signals = morseCodeOperator.EncodeCallReply(callSign, stationRequiredCallSign);
        await hubConnection.SendAsync("PropagateSignals", signals);
        StateHasChanged();
    }

    public async Task Wait()
    {
        string signals = morseCodeOperator.EncodeWait();
        await hubConnection.SendAsync("PropagateSignals", signals);
        StateHasChanged();
    }

    public async Task EndWork()
    {
        string signals = morseCodeOperator.EncodeEndOfWork();
        await hubConnection.SendAsync("PropagateSignals", signals);
        StateHasChanged();
    }

    private async Task PropagateSignals()
    {
        string signals = morseCodeOperator.EncodeTelegram(message);
        await hubConnection.SendAsync("PropagateSignals", signals);
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
